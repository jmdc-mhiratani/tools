# PDF2PNG/PDF2PPTX Project Configuration
# Security-hardened Python project configuration

[build-system]
requires = ["setuptools>=68.0", "wheel>=0.40.0"]
build-backend = "setuptools.build_meta"

[project]
name = "pdf2png-converter"
version = "2.0.0"
description = "Secure PDF to PNG and PowerPoint conversion tool with enterprise-grade security"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "PDF2PNG Project", email = "dev@pdf2png.local"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
    "Topic :: Office/Business :: Office Suites",
    "Security :: No Known Vulnerabilities"
]
requires-python = ">=3.8"
dependencies = [
    "PyMuPDF>=1.26.0,<1.27.0",
    "python-pptx>=1.0.0,<1.1.0",
    "Pillow>=11.0.0,<12.0.0"
]

[project.optional-dependencies]
dev = [
    "mypy>=1.18.0,<1.19.0",
    "black>=25.0.0,<26.0.0",
    "pytest>=8.4.0,<8.5.0",
    "pytest-cov>=7.0.0,<8.0.0"
]
security = [
    "safety>=3.0.0",
    "bandit>=1.7.0",
    "pip-audit>=2.0.0"
]

[project.urls]
Homepage = "https://github.com/pdf2png/pdf2png-converter"
Documentation = "https://pdf2png.readthedocs.io/"
Repository = "https://github.com/pdf2png/pdf2png-converter.git"
"Bug Tracker" = "https://github.com/pdf2png/pdf2png-converter/issues"

# Security and code quality configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
# Security-focused mypy settings
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true

[tool.pytest.ini_options]
minversion = "8.4"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=85"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Security testing configuration
markers = [
    "security: marks tests as security-focused",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow running"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/legacy_original/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError"
]

[tool.bandit]
exclude_dirs = ["tests", "legacy_original"]
skips = ["B101"]  # Skip assert_used test

[tool.safety]
# Security vulnerability scanning configuration
ignore = []
full_report = true